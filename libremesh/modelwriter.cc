#include <cerrno>
#include <cstring>
#include <set>
#include <iostream>
#include <iomanip>
#include <fstream>

#include "exception.h"
#include "modelwriter.h"

REMESHER_NAMESPACE_BEGIN

void
ModelWriter::save_model (std::string const& filename,
    TriangleMeshPtr mesh, bool with_normals)
{
  if (filename.size() < 4)
    throw Exception("Cannot detect model format from filename");

  std::string extension = filename.substr(filename.size() - 4);
  if (extension == ".off")
    ModelWriter::save_off_model(filename, mesh, with_normals);
  else if (extension == ".ply")
    ModelWriter::save_ply_model(filename, mesh, with_normals);
  else if (extension == ".svg")
    ModelWriter::save_svg_file(filename, mesh);
  else
    throw Exception("Cannot detect model format from filename");
}

/* ---------------------------------------------------------------- */

void
ModelWriter::save_off_model (std::string const& filename,
    TriangleMeshPtr mesh, bool with_normals)
{
  if (mesh.get() == 0)
    mesh = TriangleMesh::create();

  /* Open file for writing. */
  std::ofstream output(filename.c_str());
  if (output.fail())
    throw Exception("Cannot open \"" + filename + "\": "
        + std::string(::strerror(errno)));

  MeshVertexList const& vertices = mesh->get_vertices();
  MeshFaceList const& faces = mesh->get_faces();
  MeshNormalList const& vnormals = mesh->get_vertex_normals();

  /* Write the header. */
  with_normals = with_normals && (vnormals.size() == vertices.size());
  if (with_normals)
  {
    output << "N";
  }

  output << "OFF" << std::endl;

  /* Write number of vertices and faces. Edges is unused so simply write 0. */
  output << vertices.size() << " " << faces.size() / 3 << " 0" << std::endl;

  /* Write at least 7 digits. */
  output << std::fixed << std::setprecision(7);

  /* Write vertices. */
  for (std::size_t i = 0; i < vertices.size(); i++)
  {
    output << vertices[i].x << " " << vertices[i].y << " " << vertices[i].z;
    if (with_normals)
    {
      output << " " << vnormals[i].x
          << " " << vnormals[i].y << " " << vnormals[i].z;
    }
    output << std::endl;
  }

  /* Write faces. */
  for (std::size_t i = 0; i < faces.size()/3; i++)
  {
    std::size_t i3 = i * 3;
    output << "3 " << faces[i3 + 0] << " "
        << faces[i3 + 1] << " " << faces[i3 + 2] << std::endl;
  }

  /* Close file stream. */
  output.close();
}

/* ---------------------------------------------------------------- */
/* TODO: Does not yet export normals. */

void
ModelWriter::save_ply_model (std::string const& filename,
    TriangleMeshPtr mesh, bool /*with_normals*/)
{
  /* Got empty model? */
  if (mesh.get() == 0)
    mesh = TriangleMesh::create();

  /* Open file for writing. */
  std::ofstream output(filename.c_str());
  if (output.fail())
    throw Exception("Cannot open \"" + filename + "\": "
        + std::string(::strerror(errno)));

  MeshVertexList const& vertices = mesh->get_vertices();
  MeshFaceList const& faces = mesh->get_faces();
  //MeshNormalList const& vnormals = mesh->get_vertex_normals();

  output << "ply" << std::endl;
  output << "format ascii 1.0" << std::endl;
  output << "comment Export generated by libremesh" << std::endl;
  output << "element vertex " << vertices.size() << std::endl;
  output << "property float x" << std::endl;
  output << "property float y" << std::endl;
  output << "property float z" << std::endl;
  output << "element face " << faces.size() / 3 << std::endl;
  output << "property list uchar int vertex_indices" << std::endl;
  output << "end_header" << std::endl;

  output << std::fixed << std::setprecision(7);
  for (std::size_t i = 0; i < vertices.size(); ++i)
  {
    output << vertices[i][0] << " "
        << vertices[i][1] << " "
        << vertices[i][2] << std::endl;
  }

  std::size_t face_amount = faces.size() / 3;
  for (std::size_t i = 0; i < face_amount; ++i)
  {
    output << "3 " << faces[i * 3 + 0] << " " << faces[i * 3 + 1]
        << " " << faces[i * 3 + 2] << std::endl;
  }

  /* Close file stream. */
  output.close();
}

/* ---------------------------------------------------------------- */

void
ModelWriter::save_svg_file (std::string const& filename,
    TriangleMeshPtr mesh)
{
  /* Got empty model? */
  if (mesh.get() == 0)
    mesh = TriangleMesh::create();

  /* Open file for writing. */
  std::ofstream output(filename.c_str());
  if (output.fail())
    throw Exception("Cannot open \"" + filename + "\": "
        + std::string(::strerror(errno)));

  /* SVG config. */
  std::string const style = "fill:none; stroke:#000000; stroke-width:1px";
  std::size_t width = 1100;
  std::size_t height = 1100;
  float scale = 1000;

  /* Write SVG header. */
  output << "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>"
      << std::endl
      << "<svg xmlns:svg=\"http://www.w3.org/2000/svg\" "
      << "xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" "
      << "width=\"" << width << "\" height=\"" << height << "\" "
      << "id=\"remesher-export\">"
      << std::endl;

  MeshVertexList const& vertices = mesh->get_vertices();
  MeshFaceList const& faces = mesh->get_faces();
  std::size_t face_amount = faces.size() / 3;

  std::set<std::pair<std::size_t, std::size_t> > edges;
  for (std::size_t fid = 0; fid < face_amount; ++fid)
  {
    for (std::size_t i = 0; i < 3; ++i)
    {
      std::size_t ip1 = (i + 1) % 3;
      std::size_t v1i(faces[fid * 3 + i]);
      std::size_t v2i(faces[fid * 3 + ip1]);

      std::pair<std::size_t, std::size_t> edge;
      edge.first = (v1i < v2i ? v1i : v2i);
      edge.second = (v1i < v2i ? v2i : v1i);

      if (edges.find(edge) != edges.end())
        continue;
      edges.insert(edge);

      Vec3f v1((vertices[v1i] + Vec3f(0.55f, 0.55f, 0.0f)) * scale);
      Vec3f v2((vertices[v2i] + Vec3f(0.55f, 0.55f, 0.0f)) * scale);

      output << "<path style=\"" << style << "\" "
          << "id=\"edge-" << v1i << "-" << v2i << "\" d=\"M "
          << (int)v1[0] << "," << (int)v1[1] << " L "
          << (int)(v2[0]) << "," << (int)(v2[1])
          << "\" />" << std::endl;
    }
  }

  /* Write SVG footer. */
  output << "</svg>" << std::endl;

  /* Close file stream. */
  output.close();
}

REMESHER_NAMESPACE_END
